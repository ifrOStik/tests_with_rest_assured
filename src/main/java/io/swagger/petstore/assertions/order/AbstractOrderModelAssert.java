package io.swagger.petstore.assertions.order;

import io.swagger.petstore.models.order.OrderModel;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link OrderModel} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractOrderModelAssert<S extends AbstractOrderModelAssert<S, A>, A extends OrderModel> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractOrderModelAssert}</code> to make assertions on actual OrderModel.
   * @param actual the OrderModel we want to make assertions on.
   */
  protected AbstractOrderModelAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual OrderModel is complete.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel is not complete.
   */
  public S isComplete() {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isComplete()) {
      failWithMessage("\nExpecting that actual OrderModel is complete but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel is not complete.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel is complete.
   */
  public S isNotComplete() {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isComplete()) {
      failWithMessage("\nExpecting that actual OrderModel is not complete but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel's id is equal to the given one.
   * @param id the given id to compare the actual OrderModel's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel's petId is equal to the given one.
   * @param petId the given petId to compare the actual OrderModel's petId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel's petId is not equal to the given one.
   */
  public S hasPetId(int petId) {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting petId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualPetId = actual.getPetId();
    if (actualPetId != petId) {
      failWithMessage(assertjErrorMessage, actual, petId, actualPetId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual OrderModel's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel's quantity is not equal to the given one.
   */
  public S hasQuantity(int quantity) {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualQuantity = actual.getQuantity();
    if (actualQuantity != quantity) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel's shipDate is equal to the given one.
   * @param shipDate the given shipDate to compare the actual OrderModel's shipDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel's shipDate is not equal to the given one.
   */
  public S hasShipDate(String shipDate) {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting shipDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualShipDate = actual.getShipDate();
    if (!Objects.areEqual(actualShipDate, shipDate)) {
      failWithMessage(assertjErrorMessage, actual, shipDate, actualShipDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual OrderModel's status is equal to the given one.
   * @param status the given status to compare the actual OrderModel's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OrderModel's status is not equal to the given one.
   */
  public S hasStatus(String status) {
    // check that actual OrderModel we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
