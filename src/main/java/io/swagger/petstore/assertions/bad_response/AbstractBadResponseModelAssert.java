package io.swagger.petstore.assertions.bad_response;

import io.swagger.petstore.models.bad_response.BadResponse;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link BadResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractBadResponseModelAssert<S extends AbstractBadResponseModelAssert<S, A>, A extends BadResponse> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractBadResponseModelAssert}</code> to make assertions on actual BadResponse.
   * @param actual the BadResponse we want to make assertions on.
   */
  protected AbstractBadResponseModelAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual BadResponse's code is equal to the given one.
   * @param code the given code to compare the actual BadResponse's code to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BadResponse's code is not equal to the given one.
   */
  public S hasCode(Integer code) {
    // check that actual BadResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting code of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualCode = actual.getCode();
    if (!Objects.areEqual(actualCode, code)) {
      failWithMessage(assertjErrorMessage, actual, code, actualCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BadResponse's message is equal to the given one.
   * @param message the given message to compare the actual BadResponse's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BadResponse's message is not equal to the given one.
   */
  public S hasMessage(String message) {
    // check that actual BadResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual BadResponse's type is equal to the given one.
   * @param type the given type to compare the actual BadResponse's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BadResponse's type is not equal to the given one.
   */
  public S hasType(String type) {
    // check that actual BadResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
